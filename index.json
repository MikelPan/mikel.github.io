[{"categories":["数据库"],"content":"Mysql执行过程","date":"2021-02-02","objectID":"/mysql%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/","tags":["Mysql"],"title":"Mysql二进制安装","uri":"/mysql%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/"},{"categories":["数据库"],"content":"mysql linux环境下安装 一、创建mysql账户和数据目录 # 创建用户 groupadd mysql useradd -r -g mysql -s /bin/false mysql # 创建数据目录 mkdir -p /data/mysql3306/{mysql,binlog,slowlog,tmp,log,run} mkdir -p /usr/local/mysql chown -R mysql. /data/mysql3306 chown -R mysql. /usr/local/mysql 二、mysql二进制下载 dir=`pwd` cd $dir yum install -y wget \u0026\u0026 wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz tar zxf mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz -C /usr/local/src cp -r /usr/local/src/mysql-5.7.26-linux-glibc2.12-x86_64/* /usr/local/mysql 三、初始化mysql # 配置环境变量 echo \"export PATH=$PATH:/usr/local/mysql/bin\" \u003e\u003e /etc/profile source /etc/profile # 初始化 mysqld --defaults-file=/data/mysql3306/config/my.cnf --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql3306/mysql # 配置ssl mysql_ssl_rsa_setup --basedir=/usr/local/mysql --datadir=/data/mysql3306/mysql # 手动启动 mysqld_safe --defaults-file=/data/mysql3307/config/my.cnf \u0026 四、mysql自启动 cp mysqld.service /usr/lib/systemd/system/mysqld.service systemctl enable mysqld systemctl start mysqld 五、登录修改密码 more error.log | grep password mysql -uroot -p ALTER USER 'root'@'localhost' IDENTIFIED BY 'Paswword1!'; flush privileges 六、mysql多实例 # 初始化 mysqld --defaults-file=/data/mysql3307/config/my.cnf --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql3307/mysql mysql_ssl_rsa_setup --basedir=/usr/local/mysql --datadir=/data/mysql3307/mysql mysqld --defaults-file=/data/mysql3307/config/my.cnf --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql3307/mysql mysql_ssl_rsa_setup --basedir=/usr/local/mysql --datadir=/data/mysql3307/mysql # 启动 cp mysqld.service /usr/lib/systemd/system/mysqld3306.service cp mysqld.service /usr/lib/systemd/system/mysqld3307.service # 修改mysqld.service启动文件 Type=forking 改为 Type=sample ExecStart启动命令改为/usr/local/bin/mysqld --defaults-file=/data/mysql3306/config/my.cnf # 启动mysql systemctl enable mysqld3306 systemctl start mysqld3306 ","date":"2021-02-02","objectID":"/mysql%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/:0:1","tags":["Mysql"],"title":"Mysql二进制安装","uri":"/mysql%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/"},{"categories":["数据库"],"content":"mysql win下安装 1、下载 mysql5.7 版本 https://dev.mysql.com/downloads/mysql/ 2、创建my.ini文件 [mysql] # 设置mysql客户端默认字符集 default-character-set=utf8 [mysqld] #设置3306端口 port = 3306 # 设置mysql的安装目录 basedir=E:\\downland\\mysql-5.7.26-winx64 # 设置mysql数据库的数据的存放目录 datadir=E:\\downland\\mysql-5.7.26-winx64/data # 允许最大连接数 max_connections=200 # 服务端使用的字符集默认为8比特编码的latin1字符集 character-set-server=utf8 # 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB 3、进入mysql bin目录下 mysqld --install mysqld --initialize-insecure net start mysql sc query mysql ","date":"2021-02-02","objectID":"/mysql%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/:0:2","tags":["Mysql"],"title":"Mysql二进制安装","uri":"/mysql%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/"},{"categories":["数据库"],"content":"Mysql执行过程","date":"2021-02-02","objectID":"/mysql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/","tags":["Mysql"],"title":"Mysql执行过程","uri":"/mysql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/"},{"categories":["数据库"],"content":"Mysql 执行流程 大致流程描述: MySQL客户端通过协议将SQL语句发送给MySQL服务器。 服务器会先检查查询缓存中是否有执行过这条SQL，如果命中缓存，则将结果返回，否则进入下一个环节（查询缓存默认不开启）。 服务器端进行SQL解析，预处理，然后由查询优化器生成对应的执行计划。 服务器根据查询优化器给出的执行计划，再调用存储引擎的API执行查询。 将结果返回给客户端，如果开启查询缓存，则会备份一份到查询缓存中。 ","date":"2021-02-02","objectID":"/mysql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/:0:1","tags":["Mysql"],"title":"Mysql执行过程","uri":"/mysql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/"},{"categories":["数据库"],"content":"流程图详解 查询缓存 MySQL查询缓存会保存查询返回的完整结构。当查询命中该缓存时，MySQL会立刻返回结果，跳过了解析、优化和执行阶段。 但查询缓存是默认不开启的，且要求SQL和参数都是一样，同时查询缓存系统会跟踪查询中涉及的每一个表，如果这些表发生变化，则该表相关的所有缓存数据均会失效。所以命中率一般较低，生产环境中也很少用到，具体流程就不描述了。如果感兴趣的可以查阅详细资料。 解析和预处理 如果查询缓存未命中，则到解析器。解析器主要是对SQL语句进行解析，使用MySQLy语法规则进行验证和解析查询，并生成对应的解析树。 得到解析数之后，还需要做预处理，预处理则进一步检查解释树是否合法，以及进行一些优化，比如检查数据表和列是否存在，如果有计算，会将计算的结果算出来等等。 查询优化器 查询优化器是整个流程中重要的一环。查询优化器会将预处理之后的解析树转化成执行计划。一条查询可以有多种执行方法，最后均会返回相同结果。查询优化器的作用就是找到这其中最好的执行计划。 生成执行计划的过程会消耗较多的时间，特别是存在许多可选的执行计划时。如果在一条SQL语句执行的过程中将该语句对应的最终执行计划进行缓存，当相似的语句再次被输入服务器时，就可以直接使用已缓存的执行计划，从而跳过SQL语句生成执行计划的整个过程，进而可以提高语句的执行速度。 通常所讲的优化SQL，其实就是想让查询优化器，按照我们的思路,帮我们选择最优的执行方案。 查询执行计划 查询执行计划，就是MySQL查询中的执行计划，比如是执行where语句还是from语句，下面有一张执行顺序的图。 最先执行的总是FROM操作，最后执行的是LIMIT操作。其中每一个操作都会产生一张虚拟的表，这个虚拟的表作为一个处理的输入，只是这些虚拟的表对用户来说是透明的，但是只有最后一个虚拟的表才会被作为结果返回。如果没有在语句中指定某一个子句，那么将会跳过相应的步骤。 FORM: 对FROM的左边的表和右边的表计算笛卡尔积。产生虚表VT1 ON: 对虚表VT1进行ON筛选，只有那些符合的行才会被记录在虚表VT2中。 JOIN： 如果指定了OUTER JOIN（比如left join、 right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3， 如果 from子句中包含两个以上的表的话，那么就会对上一个join连接产生的结果VT3和下一个表重复执行步骤1~3这三个步骤，一直到处理完所有的表为止。 WHERE： 对虚拟表VT3进行WHERE条件过滤。只有符合的记录才会被插入到虚拟表VT4中。 GROUP BY: 根据group by子句中的列，对VT4中的记录进行分组操作，产生VT5. CUBE | ROLLUP: 对表VT5进行cube或者rollup操作，产生表VT6. HAVING： 对虚拟表VT6应用having过滤，只有符合的记录才会被 插入到虚拟表VT7中。 SELECT： 执行select操作，选择指定的列，插入到虚拟表VT8中。 DISTINCT： 对VT8中的记录进行去重。产生虚拟表VT9. ORDER BY: 将虚拟表VT9中的记录按照\u003corder_by_list\u003e进行排序操作，产生虚拟表VT10. LIMIT：取出指定行的记录，产生虚拟表VT11, 并将结果返回。 查询执行引擎 执行计划会传给查询执行引擎，执行引擎选择存储引擎来执行计划，到磁盘中的文件中去查询。 影响这个查询性能最根本的原因是什么? 其实是硬盘的机械运动，也就是我们平时熟悉的IO，所以一条查询语句是快还是慢，就是根据这个时间的IO来确定的。那怎么执行IO又是什么来确定的?就是传过来的这一份执行计划. ","date":"2021-02-02","objectID":"/mysql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/:0:2","tags":["Mysql"],"title":"Mysql执行过程","uri":"/mysql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/"},{"categories":null,"content":"–\u003e [ LoveIt](https://github.com/dillonzq/LoveIt) 是一个由 [Dillon](https://dillonzq.com) 开发的**简洁**、**优雅**且**高效**的 [Hugo](https://gohugo.io/) 博客主题。 它的原型基于 [LeaveIt 主题](https://github.com/liuzc/LeaveIt) 和 [KeepIt 主题](https://github.com/Fastbyte01/KeepIt)。 ![Hugo 主题 LoveIt](/images/Apple-Devices-Preview.png \"Hugo 主题 LoveIt\") ### 特性 #### 性能和 SEO *  **性能**优化：在 Google PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights) 中， [99/100 的移动设备得分和 100/100 的桌面设备得分 *  使用基于 JSON-LD 格式 的 **SEO SCHEMA** 文件进行 SEO 优化 *  支持 **[Google Analytics](https://analytics.google.com/analytics)** *  支持 **[Fathom Analytics](https://usefathom.com/)** *  支持搜索引擎的**网站验证** (Google, Bind, Yandex and Baidu) *  支持所有第三方库的 **CDN** *  基于 [lazysizes](https://github.com/aFarkas/lazysizes) 自动转换图片为**懒加载** #### 外观和布局 * / **响应式**布局 * / **浅色/深色** 主题模式 *  全局一致的**设计语言** *  支持**分页** *  易用和自动展开的**文章目录** *  支持**多语言**和国际化 *  美观的 **CSS 动画** #### 社交和评论系统 *  支持 **[Gravatar](https://gravatar.com)** 头像 *  支持本地**头像** *  支持多达 **64** 种社交链接 *  支持多达 **28** 种网站分享 *  支持 **[Disqus](https://disqus.com)** 评论系统 *  支持 **[Gitalk](https://github.com/gitalk/gitalk)** 评论系统 *  支持 **[Valine](https://valine.js.org/)** 评论系统 *  支持 **[Facebook](https://developers.facebook.com/docs/plugins/comments/) 评论**系统 *  支持 **[Telegram comments](https://comments.app/) 评论**系统 *  支持 **[Commento](https://commento.io/)** 评论系统 *  支持 **[Utterances](https://utteranc.es/)** 评论系统 #### 扩展功能 *  支持基于 [Lunr.js](https://lunrjs.com/) 或 [algolia](https://www.algolia.com/) 的**搜索** *  支持 **Twemoji** *  支持**代码高亮** *  一键**复制代码**到剪贴板 *  支持基于 [lightgallery.js](https://github.com/sachinchoolur/lightgallery.js) 的**图片画廊** *  支持 **[Font Awesome](https://fontawesome.com/) 图标**的扩展 Markdown 语法 *  支持**上标注释**的扩展 Markdown 语法 *  支持**分数**的扩展 Markdown 语法 *  支持基于 [$ \\KaTeX $](https://katex.org/) 的**数学公式** *  支持基于 [mermaid](https://github.com/knsv/mermaid) 的**图表** shortcode *  支持基于 [ECharts](https://echarts.apache.org/) 的**交互式数据可视化** shortcode *  支持基于 [Mapbox GL JS](https://docs.mapbox.com/mapbox-gl-js) 的 **Mapbox** shortcode *  支持基于 [APlayer](https://github.com/MoePlayer/APlayer) 和 [MetingJS](https://github.com/metowolf/MetingJS) 的**音乐播放器** shortcode *  支持 **Bilibili 视频** shortcode *  支持多种**注释**的 shortcode *  支持**自定义样式**的 shortcode *  支持**自定义脚本**的 shortcode *  支持基于 [TypeIt](https://typeitjs.com/) 的**打字动画** shortcode *  支持基于 [Smooth Scroll](https://github.com/cferdinandi/smooth-scroll) 的**滚动动画** *  支持基于 [cookieconsent](https://github.com/osano/cookieconsent) 的 **Cookie 许可横幅** * ... ### 许可协议 LoveIt 根据 **MIT** 许可协议授权。 更多信息请查看 [LICENSE 文件](https://github.com/dillonzq/LoveIt/blob/master/LICENSE)。 LoveIt 主题中用到了以下项目，感谢它们的作者： * [normalize.css](https://github.com/necolas/normalize.css) * [Font Awesome](https://fontawesome.com/) * [Simple Icons](https://github.com/simple-icons/simple-icons) * [Animate.css](https://daneden.github.io/animate.css/) * [Smooth Scroll](https://github.com/cferdinandi/smooth-scroll) * [autocomplete.js](https://github.com/algolia/autocomplete.js) * [Lunr.js](https://lunrjs.com/) * [algoliasearch](https://github.com/algolia/algoliasearch-client-javascript) * [lazysizes](https://github.com/aFarkas/lazysizes) * [object-fit-images](https://github.com/fregante/object-fit-images) * [Twemoji](https://github.com/twitter/twemoji) * [lightgallery.js](https://github.com/sachinchoolur/lightgallery.js) * [clipboard.js](https://github.com/zenorocha/clipboard.js) * [Sharer.js](https://github.com/ellisonleao/sharer.js) * [TypeIt](https://typeitjs.com/) * [$ \\KaTeX $](https://katex.org/) * [mermaid](https://github.com/knsv/mermaid) * [ECharts](https://echarts.apache.org/) * [Mapbox GL JS](https://docs.mapbox.com/mapbox-gl-js) * [APlayer](https://github.com/MoePlayer/APlayer) * [MetingJS](https://github.com/metowolf/MetingJS) * [Gitalk](https://github.com/gitalk/gitalk) * [Valine](https://valine.js.org/) * [cookieconsent](https://github.com/osano/cookieconsent) ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 LoveIt","uri":"/about/"}]